{"version":3,"sources":["components/TextArea.js","components/Clock.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","useState","showMessage","setShowMessage","userInput","setUserInput","scrollHandller","e","console","log","target","documentElement","scrollHeight","scrollTop","window","innerHeight","useEffect","document","addEventListener","removeEventListener","className","placeholder","value","onChange","onClick","event","preventDefault","sendMessage","map","item","index","Clock","showTime","setShowTime","updateTime","time","Date","toLocaleTimeString","setInterval","App","slides","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0QA6DeA,EA1DE,WAEb,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAiBA,SAASC,EAAeC,GACpBC,QAAQC,IAAI,UACZD,QAAQC,IAAIF,EAAEG,OAAOC,gBAAgBC,cACrCJ,QAAQC,IAAIF,EAAEG,OAAOC,gBAAgBE,WACrCL,QAAQC,IAAIK,OAAOC,aAIvB,OAfAC,qBAAU,WAEN,OADAC,SAASC,iBAAiB,SAAUZ,GAC7B,WACHW,SAASE,oBAAoB,SAAUb,MAG5C,IAUC,sBAAKc,UAAU,eAAf,UACI,sBAAKA,UAAU,wBAAf,UACK,0BACIA,UAAU,sBACVC,YAAY,4EACZC,MAAOlB,EACPmB,SAAU,SAAChB,GAAD,OAAOF,EAAaE,EAAEG,OAAOY,UAI5C,wBACIF,UAAU,oBACVI,QAAS,SAACC,GAAD,OApCL,SAAClB,EAAGH,GACpBG,EAAEmB,iBACEtB,GACAD,EAAe,GAAD,mBAAKD,GAAL,CAAkBE,KAErCC,EAAa,IA+BoBsB,CAAYF,EAAQrB,IAF5C,qBAMJ,qBAAKgB,UAAU,qBAAf,SAEKlB,EAAY0B,KAAI,SAACC,EAAMC,GAAP,OAAiB,qBAC9BV,UAAU,eADoB,SAG7BS,GADIC,YCjCVC,G,MAjBD,WACV,MAAgC9B,mBAAS,IAAzC,mBAAO+B,EAAP,KAAiBC,EAAjB,KAIA,SAASC,IACL,IAAMC,GAAO,IAAIC,MAAOC,qBACxBJ,EAAYE,GAEhB,OAPAnB,qBAAU,WACNsB,YAAYJ,EAAY,OAC1B,CAACF,IAMK,qBACIZ,UAAU,eADd,SAEI,uBAAMA,UAAU,sBAAhB,cAAwCY,S,sBCSzCO,MAff,WACI,IAAMC,EAAS,CAAC,cAAC,EAAD,IAAc,cAAC,EAAD,KAEhC,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,IAAD,UACIoB,EAAOZ,KAAI,SAACC,EAAKC,GAAN,OACR,cAAC,IAAD,UACiBD,GAARC,WCLPW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASoC,eAAe,SAM1BZ,M","file":"static/js/main.70d886db.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport \"./Textarea.scss\"\r\n\r\nconst TextArea = () => {\r\n    //массив задач\r\n    const [showMessage, setShowMessage] = useState([]);\r\n    //инициализация текст\r\n    const [userInput, setUserInput] = useState(\"\")\r\n\r\n    const sendMessage = (e, userInput) => {\r\n        e.preventDefault()\r\n        if (userInput){\r\n            setShowMessage([...showMessage, userInput])\r\n        }\r\n       setUserInput(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"scroll\", scrollHandller)\r\n        return () =>  {\r\n            document.removeEventListener(\"scroll\", scrollHandller)\r\n        }\r\n\r\n    }, [])\r\n    function scrollHandller(e){\r\n        console.log(\"scroll\")\r\n        console.log(e.target.documentElement.scrollHeight)\r\n        console.log(e.target.documentElement.scrollTop)\r\n        console.log(window.innerHeight)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Swiper-slide\">\r\n            <div className=\"Swiper-slide__control\">\r\n                 <textarea\r\n                     className=\"swiper-slide__input\"\r\n                     placeholder=\"Введите текст\"\r\n                     value={userInput}\r\n                     onChange={(e) => setUserInput(e.target.value)}/>\r\n                {/*получение данных из inputa*/}\r\n\r\n                {/*передача сообщения кнопкой*/}\r\n                <button\r\n                    className=\"swiper-slide__btn\"\r\n                    onClick={(event) => sendMessage(event , userInput)}>Send\r\n                </button>\r\n            </div>\r\n            {/*Создание формы*/}\r\n            <div className=\"Swiper-slide__desc\">\r\n                {/*Создание списка*/}\r\n                {showMessage.map((item, index) => <div\r\n                    className=\"Swiper__list\"\r\n                    key={index}>\r\n                    {item}\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextArea;","import React, {useEffect, useState} from 'react';\r\nimport \"./Clock.scss\";\r\n\r\nconst Clock = () => {\r\n    const [showTime, setShowTime] = useState(\"\")\r\n    useEffect(() => {\r\n        setInterval(updateTime, 1000)\r\n    },[showTime])\r\n    function updateTime(){\r\n        const time = new Date().toLocaleTimeString()\r\n        setShowTime(time)\r\n    }\r\n    return (\r\n            <div\r\n                className=\"Swiper-slide\">\r\n                <span className=\"Swiper-slide__clock\"> {showTime}</span>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Clock;","\r\nimport './App.css';\r\nimport TextArea from \"./components/TextArea\";\r\nimport Clock from \"./components/Clock\";\r\nimport {Swiper, SwiperSlide} from \"swiper/react\";\r\nimport 'swiper/swiper-bundle.css';\r\nimport {useEffect} from \"react\";\r\n\r\n\r\nfunction App() {\r\n    const slides = [<TextArea />, <Clock />]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Swiper >\r\n         {slides.map((item,index) =>\r\n             <SwiperSlide\r\n                 key={index}>{item}\r\n             </SwiperSlide>)}\r\n      </Swiper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}